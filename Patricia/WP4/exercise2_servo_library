//################### Start of Library ServoTimer2_h #################################

#ifndef ServoTimer2_h
#define ServoTimer2_h

#include <inttypes.h>
// typedef uint8_t boolean;
// typedef uint8_t byte;

#define MIN_PULSE_WIDTH 750 // the shortest pulse sent to a servo

#define MAX_PULSE_WIDTH 2250 // the longest pulse sent to a servo

#define DEFAULT_PULSE_WIDTH 1500 // default pulse width when servo is attached

#define FRAME_SYNC_PERIOD 20000 // total frame duration in microseconds

#define NBR_CHANNELS 8 // the maximum number of channels, don't change this

typedef struct
{

  uint8_t nbr : 5; // a pin number from 0 to 31

  uint8_t isActive : 1; // false if this channel not enabled, pin only pulsed if true

} ServoPin_t;

typedef struct
{

  ServoPin_t Pin;

  byte counter;

  byte remainder;

} servo_t;

class ServoTimer2
{
public:
  // constructor:
  ServoTimer2();

  uint8_t attach(int);           // attach the given pin to the next free channel, sets pinMode, returns channel number or 0 if failure
                                 // the attached servo is pulsed with the current pulse width value, (see the write method)
  uint8_t attach(int, int, int); // as above but also sets min and max values for writes.
  void detach();
  void write(int);    // store the pulse width in microseconds (between MIN_PULSE_WIDTH and MAX_PULSE_WIDTH)for this channel
  int read();         // returns current pulse width in microseconds for this servo
  boolean attached(); // return true if this servo is attached
private:
  uint8_t chanIndex; // index into the channel data for this servo
};

// the following ServoArrayT2 class is not implemented in the first version of this library
class ServoArrayT2
{
public:
  // constructor:
  ServoArrayT2();

  uint8_t attach(int);   // attach the given pin to the next free channel, sets pinMode, returns channel number or 0 if failure
                         // channels are assigned consecutively starting from 1
                         // the attached servo is pulsed with the current pulse width value, (see the write method)
  void detach(int);      // detach the servo on the given channel
  void write(int, int);  // store the pulse width in microseconds (between MIN_PULSE_WIDTH and MAX_PULSE_WIDTH)for the given channel
  int read(int);         // returns current pulse width in microseconds for the given channel
  boolean attached(int); // return true if the servo on the given channel is attached
private:
  uint8_t chanIndex; // index into the channel data for this servo
};

#endif

extern "C"
{
// AVR LibC Includes
#include <inttypes.h>
#include <avr/interrupt.h>
  // #include "WConstants.h"
}
// #include <Arduino.h>
// #include "ServoTimer2.h"
static void initISR();
static void writeChan(uint8_t chan, int pulsewidth);

#define FRAME_SYNC_INDEX 0                                                                  // frame sync delay is the first entry in the channel array
#define FRAME_SYNC_PERIOD 20000                                                             // total frame duration in microseconds
#define FRAME_SYNC_DELAY ((FRAME_SYNC_PERIOD - (NBR_CHANNELS * DEFAULT_PULSE_WIDTH)) / 128) // number of iterations of the ISR to get the desired frame rate
#define DELAY_ADJUST 8                                                                      // number of microseconds of calculation overhead to be subtracted from pulse timings

static servo_t servos[NBR_CHANNELS + 1]; // static array holding servo data for all channels

static volatile uint8_t Channel;  // counter holding the channel being pulsed
static volatile uint8_t ISRCount; // iteration counter used in the interrupt routines;
uint8_t ChannelCount = 0;         // counter holding the number of attached channels
static boolean isStarted = false; // flag to indicate if the ISR has been initialised

ISR(TIMER2_OVF_vect)
{
  ++ISRCount;                              // increment the overlflow counter
  if (ISRCount == servos[Channel].counter) // are we on the final iteration for this channel
  {
    TCNT2 = servos[Channel].remainder; // yes, set count for overflow after remainder ticks
  }
  else if (ISRCount > servos[Channel].counter)
  {
    // we have finished timing the channel so pulse it low and move on
    if (servos[Channel].Pin.isActive == true)     // check if activated
      digitalWrite(servos[Channel].Pin.nbr, LOW); // pulse this channel low if active

    Channel++;    // increment to the next channel
    ISRCount = 0; // reset the isr iteration counter
    TCNT2 = 0;    // reset the clock counter register
    if ((Channel != FRAME_SYNC_INDEX) && (Channel <= NBR_CHANNELS))
    {                                                // check if we need to pulse this channel
      if (servos[Channel].Pin.isActive == true)      // check if activated
        digitalWrite(servos[Channel].Pin.nbr, HIGH); // its an active channel so pulse it high
    }
    else if (Channel > NBR_CHANNELS)
    {
      Channel = 0; // all done so start over
    }
  }
}

ServoTimer2::ServoTimer2()
{
  if (ChannelCount < NBR_CHANNELS)
    this->chanIndex = ++ChannelCount; // assign a channel number to this instance
  else
    this->chanIndex = 0; // todo	// too many channels, assigning 0 inhibits this instance from functioning
}

uint8_t ServoTimer2::attach(int pin)
{
  if (isStarted == false)
    initISR();
  if (this->chanIndex > 0)
  {
    // debug("attaching chan = ", chanIndex);
    pinMode(pin, OUTPUT); // set servo pin to output
    servos[this->chanIndex].Pin.nbr = pin;
    servos[this->chanIndex].Pin.isActive = true;
  }
  return this->chanIndex;
}

void ServoTimer2::detach()
{
  servos[this->chanIndex].Pin.isActive = false;
}

void ServoTimer2::write(int pulsewidth)
{
  writeChan(this->chanIndex, pulsewidth); // call the static function to store the data for this servo
}

int ServoTimer2::read()
{
  unsigned int pulsewidth;
  if (this->chanIndex > 0)
    pulsewidth = servos[this->chanIndex].counter * 128 + ((255 - servos[this->chanIndex].remainder) / 2) + DELAY_ADJUST;
  else
    pulsewidth = 0;
  return pulsewidth;
}

boolean ServoTimer2::attached()
{
  return servos[this->chanIndex].Pin.isActive;
}

static void writeChan(uint8_t chan, int pulsewidth)
{
  // calculate and store the values for the given channel
  if ((chan > 0) && (chan <= NBR_CHANNELS)) // ensure channel is valid
  {
    if (pulsewidth < MIN_PULSE_WIDTH) // ensure pulse width is valid
      pulsewidth = MIN_PULSE_WIDTH;
    else if (pulsewidth > MAX_PULSE_WIDTH)
      pulsewidth = MAX_PULSE_WIDTH;

    pulsewidth -= DELAY_ADJUST; // subtract the time it takes to process the start and end pulses (mostly from digitalWrite)
    servos[chan].counter = pulsewidth / 128;
    servos[chan].remainder = 255 - (2 * (pulsewidth - (servos[chan].counter * 128))); // the number of 0.5us ticks for timer overflow
  }
}

static void initISR()
{
  for (uint8_t i = 1; i <= NBR_CHANNELS; i++)
  {                                    // channels start from 1
    writeChan(i, DEFAULT_PULSE_WIDTH); // store default values
  }
  servos[FRAME_SYNC_INDEX].counter = FRAME_SYNC_DELAY; // store the frame sync period

  Channel = 0;  // clear the channel index
  ISRCount = 0; // clear the value of the ISR counter;

  /* setup for timer 2 */
  TIMSK2 = 0;          // disable interrupts
  TCCR2A = 0;          // normal counting mode
  TCCR2B = _BV(CS21);  // set prescaler of 8
  TCNT2 = 0;           // clear the timer2 count
  TIFR2 = _BV(TOV2);   // clear pending interrupts;
  TIMSK2 = _BV(TOIE2); // enable the overflow interrupt

  isStarted = true; // flag to indicate this initialisation code has been executed
}

//################### End of Library ServoTimer2_h #####################################
//######################################################################################
//######################################################################################


//Define the servo pin
#define servoSec 5    
#define servoMin 6
#define servoHour 7
#define CLOCK_TIME 16000000
#define PRESCALE 1024
#define FREQUENCY 8   //frequency 1 = 15624  - frequency 8 = 1902

int time = 0;
const int start_point = 750;   //min pulse width for 0 degree
const int end_point = 2250;    //max pulse width for around 180 degree
int seconds = start_point;
int minutes = start_point;
int hours = start_point;
int sec = 0;
int min = 0;
int hour = 0;

// Create a new servo object:
ServoTimer2 servo_sec;
ServoTimer2 servo_min;
ServoTimer2 servo_hour;

void setup() {
  Serial.begin(9600);
  servo_sec.attach(servoSec);    // Attach the Servo variable to a pin:
  servo_min.attach(servoMin);
  servo_hour.attach(servoHour);
  
  cli();//stop interrupts

//set timer1 interrupt at 1Hz
  TCCR1A = 0;// set entire TCCR1A register to 0
  TCCR1B = 0;// same for TCCR1B
  // set compare match register for 1hz increments
  time = (CLOCK_TIME / (PRESCALE * FREQUENCY)) - 1;
  OCR1A = time;// = (16*10^6) / (1*1024) - 1 (must be <65536) 15624
  TCCR1B |= (1 << WGM12);   // turn on CTC mode
  // Set CS12 and CS10 bits for 1024 prescaler
  TCCR1B |= (1 << CS12) | (1 << CS10);  
  // enable timer compare interrupt
  TIMSK1 |= (1 << OCIE1A);

  sei();//allow interrupts
}

void loop() {
}

ISR(TIMER1_COMPA_vect){ 
  
  TCNT1  = 0;

  servo_sec.write(seconds);
  servo_min.write(minutes);
  servo_hour.write(hours);
  seconds += 25;
  
  if(seconds == end_point){
    seconds = start_point;
    servo_sec.write(seconds);
    minutes += 25;
    servo_min.write(minutes);
  }
  
  if(minutes == end_point) {
    minutes = start_point;
    servo_min.write(minutes);
    hours += 25;
    servo_hour.write(hours);
  }
  
  sec = (seconds - start_point) / 25;
  min = (minutes - start_point) / 25;
  hour = (hours - start_point) / 25;
  
  Serial.print("Time: ");
  Serial.print(hour);
  Serial.print(":");
  Serial.print(min);
  Serial.print(":");
  Serial.println(sec);
}